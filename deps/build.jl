using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libical"], :libical),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/jgoldfar/LibicalBuilder/releases/download/v3.0.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686) => ("$bin_prefix/LibicalBuilder.v3.0.0.i686-w64-mingw32.tar.gz", "4a09bdff2722149cc598c0155b484a42b68d5497316236e0463e563b1a13a70b"),
    MacOS(:x86_64) => ("$bin_prefix/LibicalBuilder.v3.0.0.x86_64-apple-darwin14.tar.gz", "f5708a89c015d7f86b6477b84270412d253d00561646638f5c67af9373549f70"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/LibicalBuilder.v3.0.0.x86_64-linux-gnu.tar.gz", "4a9410db176566ee5a47764de14be1dd0ce2a5b17549e9b274d2d1aa7cc0b655"),
    FreeBSD(:x86_64) => ("$bin_prefix/LibicalBuilder.v3.0.0.x86_64-unknown-freebsd11.1.tar.gz", "8f8226b70a201aa9e8c2924aba01602de16af8fa13100f7b1438a99602b52df4"),
    Windows(:x86_64) => ("$bin_prefix/LibicalBuilder.v3.0.0.x86_64-w64-mingw32.tar.gz", "baf0e9614746bd6875f86e32e2e1954d1713ebb2d2679c706422268298cc80f0"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
